name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.24'

jobs:
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: ${{ env.GO_VERSION }}
    
  #   - name: golangci-lint
  #     uses: golangci/golangci-lint-action@v3
  #     with:
  #       version: latest
  #       args: --no-config --timeout=5m

  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: ${{ env.GO_VERSION }}
    
  #   - name: Cache Go modules
  #     uses: actions/cache@v4
  #     with:
  #       path: ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-
    
  #   - name: Download dependencies
  #     run: go mod download
    
  #   - name: Run tests
  #     run: go test -v -race -coverprofile=coverage.out ./...
    
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.out
    #     flags: unittests
    #     name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    # needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    # - name: Cache Go modules
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/go/pkg/mod
    #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
    #     restore-keys: |
    #       ${{ runner.os }}-go-
    - name: Debug directory and permissions
      run: |
        pwd
        ls -la 

    - name: Debug directory structure
      run: ls -R
  
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      run: make build
      working-directory: ./
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: synacklab
        path: bin/

  # integration-test:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: ${{ env.GO_VERSION }}
    
  #   - name: Download dependencies
  #     run: go mod download
    
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: synacklab-binary
  #       path: ./
    
  #   - name: Make binary executable
  #     run: chmod +x ./synacklab
    
  #   - name: Run integration tests
  #     run: go test -v ./test/integration/...
  #     env:
  #       SYNACKLAB_BINARY: ./synacklab

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
